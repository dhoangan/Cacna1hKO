library(MCMCglmm)
library(DHARMa)
library(glmmTMB)
data = read.csv("isra_rel_activity_freq_230315.csv", sep=",")
data = read.csv("isra_rel_activity_freq.csv", sep=",")
data_table <- subset(data, select=c("animal",
"recording",
"genotype_2",
"cell",
"activity",
"pos",
"control"))
## make variables as factor
data_table$pos <- as.factor(data_table$pos)
data_table$animal <- as.factor(data_table$animal)
data_table$recording <- as.factor(data_table$recording)
data_table$cell <- as.factor(data_table$cell)
data_table$genotype_2 <- as.factor(data_table$genotype_2)
data_table = subset(data_table, pos == 2)
#boxplot(activity ~ genotype_2, data_table)
#ggplot(aes(pos, activity, color=genotype_2), data = data_table) +  geom_point()
ggplot(aes(y=activity, x=pos, fill=genotype_2), data = data_table) + geom_boxplot()
ggplot(aes(pos, activity, color=genotype_2), data = data_table) + geom_beeswarm(dodge.width = 1)
ggplot(aes(pos, activity, color=genotype_2), data = data_table) + geom_quasirandom(dodge.width=.8)
# Check data
unique(data_table["genotype_2"])[[1]]
unique(data_table["pos"])[[1]]
unique(data_table["control"])[[1]]
# Make subsets
data_subset_wt = subset(data_table, (genotype_2 == "wt") | (genotype_2 == "wt_ctrl"))
data_subset_KO = subset(data_table, (genotype_2 == "KO") | (genotype_2 == "KO_ctrl"))
ggplot(aes(y=activity, x=pos, fill=genotype_2), data = data_subset_KO) + geom_boxplot()
ggplot(data_subset_KO, aes(activity, fill=genotype_2)) + geom_histogram()
mean(subset(data_subset_KO, (genotype_2 == "KO"))$activity)
data_subset_A = data_subset_wt
data_subset_A = data_subset_wt
ggplot(data_subset_A, aes(activity, fill=genotype_2)) + geom_histogram()
m1.norm <- glmmTMB(activity ~ genotype_2 + (1|recording),
data = data_subset_A)
#m1.lnorm <- glmmTMB(activity ~ genotype_2 + (1|recording),
#                  family = gaussian(link="log"), data = data_subset_A)
#m1.gamma <- glmmTMB(activity ~ genotype_2 + (1|recording),
#                  family = Gamma(link="log"), data = data_subset_A)
m1.tweedie <- glmmTMB(activity ~ genotype_2 ++ (1|recording),
family = tweedie(link="log"), data = data_subset_A)
# Select one of the distributions
res <- simulateResiduals(m1.norm, plot = T)
#res <- simulateResiduals(m1.lnorm, plot = T)
#res <- simulateResiduals(m1.gamma, plot = T)
res <- simulateResiduals(m1.tweedie, plot = T)
# reduced base model
model_wt.base <- glmmTMB(activity ~ 1 + (1|recording),family = tweedie(link="log"),
data = data_subset_wt)
# full model
model_wt <- glmmTMB(activity ~ genotype_2 + (1|recording),family = tweedie(link="log"),
data = data_subset_wt)
summary(model_wt)
simulationOutput <- simulateResiduals(model_wt, 1000)
plot(simulationOutput)
plot(fitted(model_wt), residuals(model_wt), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_wt)), mean(residuals(model_wt)))
# compare models
anova_result_wt = anova(model_wt.base, model_wt)
print(anova_result_wt)
# reduced base model
model_KO.base <- glmmTMB(activity ~ 1 + (1|recording),family = tweedie(link="log"),
data = data_subset_KO)
# full model
model_KO <- glmmTMB(activity ~ genotype_2 + (1|recording),family = tweedie(link="log"),
data = data_subset_KO)
summary(model_KO)
simulationOutput <- simulateResiduals(model_KO, 1000)
plot(simulationOutput)
plot(fitted(model_KO), residuals(model_KO), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_KO)), mean(residuals(model_KO)))
# compare models
anova_result_KO = anova(model_KO.base, model_KO)
print(anova_result_KO)
library(lme4)
library(ggplot2)
library(lmerTest)
library(MASS)
library(car)
library(MCMCglmm)
library(DHARMa)
library(glmmTMB)
library(ggbeeswarm)
data = read.csv("isra_rel_activity_freq.csv", sep=",")
data_table <- subset(data, select=c("animal",
"recording",
"genotype_2",
"cell",
"intraburst_freq",
"count",
"pos",
"control"))
## make variables as factor
data_table$pos <- as.factor(data_table$pos)
data_table$animal <- as.factor(data_table$animal)
data_table$recording <- as.factor(data_table$recording)
data_table$cell <- as.factor(data_table$cell)
data_table$genotype_2 <- as.factor(data_table$genotype_2)
data_table = subset(data_table, pos == 2)
data_table = subset(data_table, count > 5)
data_table = data_table[!is.na(data_table$intraburst_freq),]
#boxplot(intraburst_freq ~ genotype_2, data_table)
#ggplot(aes(pos, intraburst_freq, color=genotype_2), data = data_table) +  geom_point()
ggplot(aes(y=intraburst_freq, x=pos, fill=genotype_2), data = data_table) + geom_boxplot()
ggplot(aes(pos, intraburst_freq, color=genotype_2), data = data_table) + geom_beeswarm(dodge.width = 1)
ggplot(aes(pos, intraburst_freq, color=genotype_2), data = data_table) + geom_quasirandom(dodge.width=.8)
# Check data
unique(data_table["genotype_2"])[[1]]
unique(data_table["pos"])[[1]]
unique(data_table["control"])[[1]]
# Make subsets
data_subset_wt = subset(data_table, (genotype_2 == "wt") | (genotype_2 == "wt_ctrl"))
data_subset_KO = subset(data_table,(genotype_2 == "KO") | (genotype_2 == "KO_ctrl"))
ggplot(aes(y=intraburst_freq, x=genotype_2), data = data_subset_KO) + geom_boxplot()
ggplot(data_subset_wt, aes(intraburst_freq, fill=genotype_2)) + geom_histogram()
mean(subset(data_subset_KO, genotype_2 == "KO")$intraburst_freq)
mean(subset(data_subset_wt, genotype_2 == "wt")$intraburst_freq)
data_subset_A = data_subset_wt
ggplot(data_subset_A, aes(intraburst_freq, fill=genotype_2)) + geom_histogram()
m1.norm <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),
data = data_subset_A)
m1.lnorm <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),
family = gaussian(link="log"), data = data_subset_A)
m1.gamma <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),
family = Gamma(link="log"), data = data_subset_A)
m1.tweedie <- glmmTMB(intraburst_freq ~ genotype_2 +(1|recording),
family = tweedie(link="log"), data = data_subset_A)
# Select one of the distributions
res <- simulateResiduals(m1.norm, plot = T)
res <- simulateResiduals(m1.lnorm, plot = T)
res <- simulateResiduals(m1.gamma, plot = T)
res <- simulateResiduals(m1.tweedie, plot = T)
# reduced base model
model_wt.base <- glmmTMB(intraburst_freq ~ 1 + (1|recording),family = Gamma(link="log"),
data = data_subset_wt)
# full model
model_wt <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),family = Gamma(link="log"),
data = data_subset_wt)
summary(model_wt)
simulationOutput <- simulateResiduals(model_wt, 1000)
plot(simulationOutput)
plot(fitted(model_wt), residuals(model_wt), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_wt)), mean(residuals(model_wt)))
# compare models
anova_result_wt = anova(model_wt.base, model_wt)
print(anova_result_wt)
# reduced base model
model_KO.base <- glmmTMB(intraburst_freq ~ 1 + (1|recording),
data = data_subset_KO)
# full model
model_KO <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),
data = data_subset_KO)
summary(model_KO)
simulationOutput <- simulateResiduals(model_KO, 1000)
plot(simulationOutput)
plot(fitted(model_KO), residuals(model_KO), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_KO)), mean(residuals(model_KO)))
# compare models
anova_result_KO = anova(model_KO.base, model_KO)
print(anova_result_KO)
library(lme4)
library(ggplot2)
library(lmerTest)
library(MASS)
library(car)
library(MCMCglmm)
library(DHARMa)
library(glmmTMB)
data = read.csv("doppel_perf_active_cells_per_slice.csv", sep=",")
data_table <- subset(data, select=c("animal",
"recording",
"genotype_2",
"n_percentage_active_cells_pos2",
"n_percentage_active_cells_pos3"))
## make variables as factor
data_table$animal <- as.factor(data_table$animal)
data_table$recording <- as.factor(data_table$recording)
data_table$genotype_2 <- as.factor(data_table$genotype_2)
library(lme4)
library(ggplot2)
library(lmerTest)
library(MASS)
library(car)
library(MCMCglmm)
library(DHARMa)
library(glmmTMB)
library(ggbeeswarm)
data = read.csv("doppel_perf_active_cells_per_slice.csv", sep=",")
setwd("C:/Users/dinhha/OneDrive - Charité - Universitätsmedizin Berlin/Analysis/Cacna1h KO Paper/Skripte/Cacna1hKO/TTAP2_isra_Cal520")
data = read.csv("doppel_perf_active_cells_per_slice.csv", sep=",")
data_table <- subset(data, select=c("animal",
"recording",
"genotype_2",
"n_percentage_active_cells_pos2",
"n_percentage_active_cells_pos3"))
## make variables as factor
data_table$animal <- as.factor(data_table$animal)
data_table$recording <- as.factor(data_table$recording)
data_table$genotype_2 <- as.factor(data_table$genotype_2)
ggplot(aes(y=n_percentage_active_cells_pos2, x=genotype_2), data = data_table) + geom_boxplot()
ggplot(aes(y=n_percentage_active_cells_pos3, x=genotype_2), data = data_table) + geom_boxplot()
ggplot(aes(genotype_2, n_percentage_active_cells_pos2), data = data_table) + geom_beeswarm(dodge.width = 1)
ggplot(aes(genotype_2, n_percentage_active_cells_pos3), data = data_table) + geom_quasirandom(dodge.width=.8)
# Check data
unique(data_table["genotype_2"])[[1]]
# Make subsets
data_subset_1 = subset(data_table, select=c("recording",
"genotype_2",
"n_percentage_active_cells_pos2"))
data_subset_2 = subset(data_table, select=c(
"recording",
"genotype_2",
"n_percentage_active_cells_pos3"))
data_subset_A = data_subset_1
ggplot(data_subset_A, aes(n_percentage_active_cells_pos2, fill=genotype_2)) + geom_histogram()
#m1.norm <- glmmTMB(n_percentage_active_cells_pos2 ~ genotype_2 + (1|recording),
#                data = data_subset_A)
#m1.lnorm <- glmmTMB(n_percentage_active_cells_pos2 ~ genotype_2  + (1|recording),
#                 family = gaussian(link="log"), data = data_subset_A)
#m1.gamma <- glmmTMB(n_percentage_active_cells_pos2 ~ genotype_2  + (1|recording),
#                  family = Gamma(link="log"), data = data_subset_A)
m1.tweedie <- glmmTMB(n_percentage_active_cells_pos2 ~ genotype_2 +  + (1|recording),
family = tweedie(link="log"), data = data_subset_A)
# Select one of the distributions
#res <- simulateResiduals(m1.norm, plot = T)
#res <- simulateResiduals(m1.lnorm, plot = T)
#res <- simulateResiduals(m1.gamma, plot = T)
res <- simulateResiduals(m1.tweedie, plot = T)
# reduced base model
model_pos2.base <- glmmTMB(n_percentage_active_cells_pos2 ~ 1 + (1|recording),family = tweedie(link="log"),
data = data_subset_1)
# full model
model_pos2 <- glmmTMB(n_percentage_active_cells_pos2 ~ genotype_2 + (1|recording),family = tweedie(link="log"),
data = data_subset_1)
summary(model_pos2)
simulationOutput <- simulateResiduals(model_pos2, 1000)
plot(simulationOutput)
plot(fitted(model_pos2), residuals(model_pos2), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_pos2)), mean(residuals(model_pos2)))
# compare models
anova_result_pos2 = anova(model_pos2.base, model_pos2)
print(anova_result_pos2)
# reduced base model
model_pos3.base <- glmmTMB(n_percentage_active_cells_pos3 ~ 1 + (1|recording),family = tweedie(link="log"),
data = data_subset_2)
# full model
model_pos3 <- glmmTMB(n_percentage_active_cells_pos3 ~ genotype_2 + (1|recording),family = tweedie(link="log"),
data = data_subset_2)
summary(model_pos3)
simulationOutput <- simulateResiduals(model_pos3, 1000)
plot(simulationOutput)
plot(fitted(model_pos3), residuals(model_pos3), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_pos3)), mean(residuals(model_pos3)))
# compare models
anova_result_pos3 = anova(model_pos3.base, model_pos3)
print(anova_result_pos3)
library(lme4)
library(ggplot2)
library(lmerTest)
library(MASS)
library(car)
library(MCMCglmm)
library(DHARMa)
library(glmmTMB)
library(ggbeeswarm)
data = read.csv("doppel_perf_rel_activity_freq.csv", sep=",")
data_table <- subset(data, select=c("animal",
"recording",
"genotype_2",
"cell",
"activity",
"pos",
"control"))
## make variables as factor
data_table$pos <- as.factor(data_table$pos)
data_table$animal <- as.factor(data_table$animal)
data_table$recording <- as.factor(data_table$recording)
data_table$cell <- as.factor(data_table$cell)
data_table$genotype_2 <- as.factor(data_table$genotype_2)
#boxplot(activity ~ genotype_2, data_table)
#ggplot(aes(pos, activity, color=genotype_2), data = data_table) +  geom_point()
ggplot(aes(y=activity, x=pos, fill=genotype_2), data = data_table) + geom_boxplot()
ggplot(aes(pos, activity, color=genotype_2), data = data_table) + geom_beeswarm(dodge.width = 1)
ggplot(aes(pos, activity, color=genotype_2), data = data_table) + geom_quasirandom(dodge.width=.8)
# Check data
unique(data_table["genotype_2"])[[1]]
unique(data_table["pos"])[[1]]
unique(data_table["control"])[[1]]
# Make subsets
data_subset_1 = subset(data_table, (pos == 2))
data_subset_2 = subset(data_table, (pos==3))
ggplot(aes(y=activity, x=pos, fill=genotype_2), data = data_subset_1) + geom_boxplot()
ggplot(data_subset_1, aes(activity, fill=genotype_2)) + geom_histogram()
mean(subset(data_subset_1, (genotype_2 == "wt"))$activity)
mean(subset(data_subset_1, (genotype_2 == "wt_ctrl"))$activity)
data_subset_A = data_subset_1
ggplot(data_subset_A, aes(activity, fill=genotype_2)) + geom_histogram()
#m1.norm <- glmmTMB(activity ~ genotype_2 + (1|recording),
#                 data = data_subset_A)
#m1.lnorm <- glmmTMB(activity ~ genotype_2 + (1|recording),
#                  family = gaussian(link="log"), data = data_subset_A)
#m1.gamma <- glmmTMB(activity ~ genotype_2 + (1|recording),
#                  family = Gamma(link="log"), data = data_subset_A)
m1.tweedie <- glmmTMB(activity ~ genotype_2 ++ (1|recording),
family = tweedie(link="log"), data = data_subset_A)
# Select one of the distributions
#res <- simulateResiduals(m1.norm, plot = T)
#res <- simulateResiduals(m1.lnorm, plot = T)
#res <- simulateResiduals(m1.gamma, plot = T)
res <- simulateResiduals(m1.tweedie, plot = T)
# reduced base model
model_1.base <- glmmTMB(activity ~ 1 + (1|recording),family = tweedie(link="log"),
data = data_subset_1)
# full model
model_1 <- glmmTMB(activity ~ genotype_2 + (1|recording),family = tweedie(link="log"),
data = data_subset_1)
summary(model_1)
simulationOutput <- simulateResiduals(model_1, 1000)
plot(simulationOutput)
plot(fitted(model_1), residuals(model_1), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_1)), mean(residuals(model_1)))
# compare models
anova_result_1 = anova(model_1.base, model_1)
print(anova_result_1)
# reduced base model
model_2.base <- glmmTMB(activity ~ 1 + (1|recording),family = tweedie(link="log"),
data = data_subset_2)
# full model
model_2 <- glmmTMB(activity ~ genotype_2 + (1|recording),family = tweedie(link="log"),
data = data_subset_2)
summary(model_2)
simulationOutput <- simulateResiduals(model_2, 1000)
plot(simulationOutput)
plot(fitted(model_2), residuals(model_2), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_2)), mean(residuals(model_2)))
# compare models
anova_result_2 = anova(model_2.base, model_2)
print(anova_result_2)
library(lme4)
library(ggplot2)
library(lmerTest)
library(MASS)
library(car)
library(MCMCglmm)
library(DHARMa)
library(glmmTMB)
library(ggbeeswarm)
data = read.csv("doppel_perf_rel_activity_freq.csv", sep=",")
data_table <- subset(data, select=c("animal",
"recording",
"genotype_2",
"cell",
"intraburst_freq",
"count",
"pos",
"control"))
## make variables as factor
data_table$pos <- as.factor(data_table$pos)
data_table$animal <- as.factor(data_table$animal)
data_table$recording <- as.factor(data_table$recording)
data_table$cell <- as.factor(data_table$cell)
data_table$genotype_2 <- as.factor(data_table$genotype_2)
data_table = subset(data_table, count > 5)
data_table = data_table[!is.na(data_table$intraburst_freq),]
#boxplot(intraburst_freq ~ genotype_2, data_table)
#ggplot(aes(pos, intraburst_freq, color=genotype_2), data = data_table) +  geom_point()
ggplot(aes(y=intraburst_freq, x=pos, fill=genotype_2), data = data_table) + geom_boxplot()
ggplot(aes(pos, intraburst_freq, color=genotype_2), data = data_table) + geom_beeswarm(dodge.width = 1)
ggplot(aes(pos, intraburst_freq, color=genotype_2), data = data_table) + geom_quasirandom(dodge.width=.8)
# Check data
unique(data_table["genotype_2"])[[1]]
unique(data_table["pos"])[[1]]
unique(data_table["control"])[[1]]
# Make subsets
data_subset_1 = subset(data_table, (pos == 1))
data_subset_2 = subset(data_table, pos==2)
unique(data_subset_1["genotype_2"])[[1]]
unique(data_subset_1["pos"])[[1]]
unique(data_subset_1["control"])[[1]]
ggplot(aes(y=intraburst_freq, x=genotype_2), data = data_subset_1) + geom_boxplot()
ggplot(data_subset_1, aes(intraburst_freq, fill=genotype_2)) + geom_histogram()
mean(subset(data_subset_1, genotype_2 == "wt_ctrl")$intraburst_freq)
mean(subset(data_subset_1, genotype_2 == "wt")$intraburst_freq)
data_subset_A = data_subset_1
ggplot(data_subset_A, aes(intraburst_freq, fill=genotype_2)) + geom_histogram()
m1.norm <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),
data = data_subset_A)
m1.lnorm <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),
family = gaussian(link="log"), data = data_subset_A)
m1.gamma <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),
family = Gamma(link="log"), data = data_subset_A)
# Select one of the distributions
res <- simulateResiduals(m1.norm, plot = T)
res <- simulateResiduals(m1.lnorm, plot = T)
res <- simulateResiduals(m1.gamma, plot = T)
# reduced base model
model_pos1.base <- glmmTMB(intraburst_freq ~ 1 + (1|recording),family = Gamma(link="log"),
data = data_subset_1)
# full model
model_pos1 <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),family = Gamma(link="log"),
data = data_subset_1)
summary(model_pos1)
simulationOutput <- simulateResiduals(model_pos1, 1000)
# reduced base model
model_pos1.base <- glmmTMB(intraburst_freq ~ 1 + (1|recording),family = Gamma(link="log"),
data = data_subset_1)
# full model
model_pos1 <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),family = Gamma(link="log"),
data = data_subset_1)
summary(model_pos1)
simulationOutput <- simulateResiduals(model_pos1, 1000)
plot(simulationOutput)
plot(fitted(model_pos1), residuals(model_pos1), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_pos1)), mean(residuals(model_pos1)))
# compare models
anova_result_pos1 = anova(model_pos1.base, model_pos1)
print(anova_result_pos1)
# reduced base model
model_pos2.base <- glmmTMB(intraburst_freq ~ 1 + (1|recording),family = Gamma(link="log"),
data = data_subset_2)
# full model
model_pos2 <- glmmTMB(intraburst_freq ~ genotype_2 + (1|recording),family = Gamma(link="log"),
data = data_subset_2)
summary(model_pos2)
simulationOutput <- simulateResiduals(model_pos2, 1000)
plot(simulationOutput)
plot(fitted(model_pos2), residuals(model_pos2), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_pos2)), mean(residuals(model_pos2)))
# compare models
anova_result_pos2 = anova(model_pos2.base, model_pos2)
print(anova_result_pos2)
data = read.csv("doppel_perf_freq_WT_pos2_positive.csv", sep=",")
data_table <- subset(data, select=c( "recording",
"genotype_3",
"cell",
"freq"))
## make variables as factor
data_table$recording <- as.factor(data_table$recording)
data_table$cell <- as.factor(data_table$cell)
data_table$genotype_3 <- as.factor(data_table$genotype_3)
data_table = data_table[!is.na(data_table$freq),]
ggplot(aes(y=freq, x=genotype_3), data = data_table) + geom_boxplot()
ggplot(aes(genotype_3, freq), data = data_table) + geom_beeswarm(dodge.width = 1)
ggplot(aes(genotype_3, freq), data = data_table) + geom_quasirandom(dodge.width=.8)
# Check data
unique(data_table["genotype_3"])[[1]]
# Make subsets
data_subset_1 = subset(data_table, (genotype_3 == "wt_1") | (genotype_3 == "wt_ctrl_1"))
data_subset_2 = subset(data_table, (genotype_3 == "wt_2") | (genotype_3 == "wt_ctrl_2"))
ggplot(aes(y=freq, x=genotype_3), data = data_subset_2) + geom_boxplot()
ggplot(data_subset_2, aes(freq, fill=genotype_3)) + geom_histogram()
mean(subset(data_subset_1, genotype_3 == "wt_1")$freq)
mean(subset(data_subset_2, genotype_3 == "wt_2")$freq)
mean(subset(data_subset_1, genotype_3 == "wt_ctrl_1")$freq)
mean(subset(data_subset_2, genotype_3 == "wt_ctrl_2")$freq)
unique(data_subset_2["genotype_3"])[[1]]
data_subset_A = data_subset_2
ggplot(data_subset_A, aes(freq, fill=genotype_3)) + geom_histogram()
m1.norm <- glmmTMB(freq ~ genotype_3 + (1|recording),
data = data_subset_A)
m1.lnorm <- glmmTMB(freq ~ genotype_3 + (1|recording),
family = gaussian(link="log"), data = data_subset_A)
m1.gamma <- glmmTMB(freq ~ genotype_3 + (1|recording),
family = Gamma(link="log"), data = data_subset_A)
# Select one of the distributions
res <- simulateResiduals(m1.norm, plot = T)
res <- simulateResiduals(m1.lnorm, plot = T)
res <- simulateResiduals(m1.gamma, plot = T)
# reduced base model
model_1.base <- glmmTMB(freq ~ 1 + (1|recording),family = Gamma(link="log"),
data = data_subset_1)
# full model
model_1 <- glmmTMB(freq ~ genotype_3 + (1|recording),family = Gamma(link="log"),
data = data_subset_1)
summary(model_1)
simulationOutput <- simulateResiduals(model_1, 1000)
plot(simulationOutput)
plot(fitted(model_1), residuals(model_1), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_1)), mean(residuals(model_1)))
# compare models
anova_result_1 = anova(model_1.base, model_1)
print(anova_result_1)
# reduced base model
model_2.base <- glmmTMB(freq ~ 1 + (1|recording),family = Gamma(link="log"),
data = data_subset_2)
# full model
model_2 <- glmmTMB(freq ~ genotype_3 + (1|recording),family = Gamma(link="log"),
data = data_subset_2)
summary(model_2)
simulationOutput <- simulateResiduals(model_2, 1000)
plot(simulationOutput)
plot(fitted(model_2), residuals(model_2), xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, lty = 2)
lines(mean(fitted(model_2)), mean(residuals(model_2)))
# compare models
anova_result_2 = anova(model_2.base, model_2)
print(anova_result_2)
